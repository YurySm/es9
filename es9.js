// 1. Rest/Spread –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
const items = { first, second, ...others };

// 2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è for-await-of
const arr = [1, 2, 3, 4]

async function test1() {
   for await (const el of arr) {
        setTimeout(() => {
            console.log(el);
        }, 1000)
    }
}
test1(); // 1, 2, 3, 4

//3. Promise.prototype.finally()
fetch("https://...")
  .then(res => res.json())
  .then(data => console.log(data))
  .catch(error => console.error(error))
  .finally(() => console.log("finished"));  // –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ

// 4. –£–ª—É—á—à–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
// ?= -- –∑–∞ —Å—Ç—Ä–æ–∫–æ–π —Å–ª–µ–¥—É–µ—Ç —Å—Ç—Ä–æ–∫–∞
// /Java(?=Script)/ –∏—â–µ—Ç Java –ø–µ—Ä–µ–¥ Script, 
/Java(?=Script)/.test('JavaScript is cool'); // true

// ?! –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–µ–Ω–æ ?=
// /Java(?!Script)/
/Java(?!Script)/.test('JavaScript is cool'); // false

// ?<=
// /(?<=Java)Script/ -- –∏—â–µ–º —Å—Ç—Ä–æ–∫—É ‚ÄòJava‚Äô –∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–æ–∏—Ç ‚ÄòScript‚Äô.
/(?<=Java)Script/.test('JavaScript is cool'); // true

// ?<! –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–µ–Ω–æ ?<=
// /(?<!Java)Script/
/(?<!Java)Script/.test('JavaScript is cool'); // false

// 5. –£–ø—Ä–∞–≤–ª—è—é—â–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å Unicode –≤ \p{‚Ä¶} –∏ \P{‚Ä¶}
// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ASCII, ASCII_Hex_Digit, Uppercase, Lowercase, White_Space, Alphabetic, Emoji –∏ –¥—Ä—É–≥–∏–µ:
/^\p{ASCII}+$/u.test('abc'); // true
/^\p{ASCII_Hex_Digit}+$/u.test('0123456789ABCDEF'); // true
/^\p{Lowercase}$/u.test('h'); // true
/^\p{Uppercase}$/u.test('H'); // true
/^\p{Script=Greek}+$/u.test('ŒµŒªŒªŒ∑ŒΩŒπŒ∫Œ¨'); // true
/^\p{Emoji}+$/u.test('üôÉüôÉ') // true

// 6. –ó–∞—Ö–≤–∞—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –≤ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö
// –î–û
const re1 = /(\d{4})-(\d{2})-(\d{2})/;
const result1 = re1.exec("2019-04-10");
console.log(result1);
// ["2019-04-10", "2019", "04", "10", index: 0, input: "2019-04-10", groups: undefined]

// –ü–û–°–õ–ï (ECMAScript ES2018)
const re2 = /(?<year>\d{4})-(?<month>\d{2})-(?<day>\d{2})/;
const result2 = re2.exec("2019-04-10");
console.log(result2);
// [ "2019-04-10", "2019", "04", "10", index: 0, input: "2019-04-10",
//    groups: {year: "2019", month: "04", day: "10"}
// ]

// result2.groups.year === '2019';
// result2.groups.month === '04';
// result2.groups.day === '10';

// 7. –§–ª–∞–≥ s –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π( . –∫–∞–∫ —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
const re3 = /hi.welcome/;
const re4 = /hi.welcome/s;

re3.test("hi\nwelcome"); // false
re4.test("hi\nwelcome"); // true

re4.dotAll; // true
re4.flags; // "s"
